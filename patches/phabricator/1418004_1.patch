diff --git a/src/applications/feed/conduit/FeedQueryConduitAPIMethod.php b/src/applications/feed/conduit/FeedQueryConduitAPIMethod.php
index bddc4f592..7ada44947 100644
--- a/src/applications/feed/conduit/FeedQueryConduitAPIMethod.php
+++ b/src/applications/feed/conduit/FeedQueryConduitAPIMethod.php
@@ -1,6 +1,6 @@
 <?php
 
-final class FeedQueryConduitAPIMethod extends FeedConduitAPIMethod {
+class FeedQueryConduitAPIMethod extends FeedConduitAPIMethod {
 
   public function getAPIMethodName() {
     return 'feed.query';
@@ -54,7 +54,7 @@ final class FeedQueryConduitAPIMethod extends FeedConduitAPIMethod {
     return 'nonempty dict';
   }
 
-  protected function execute(ConduitAPIRequest $request) {
+  public function execute(ConduitAPIRequest $request) {
     $results = array();
     $user = $request->getUser();
 
diff --git a/src/applications/feed/query/PhabricatorFeedQuery.php b/src/applications/feed/query/PhabricatorFeedQuery.php
index 8302af20c..c6b3c94dd 100644
--- a/src/applications/feed/query/PhabricatorFeedQuery.php
+++ b/src/applications/feed/query/PhabricatorFeedQuery.php
@@ -1,13 +1,19 @@
 <?php
 
-final class PhabricatorFeedQuery
+class PhabricatorFeedQuery
   extends PhabricatorCursorPagedPolicyAwareQuery {
 
+  private $ids;
   private $filterPHIDs;
   private $chronologicalKeys;
   private $rangeMin;
   private $rangeMax;
 
+  public function withIDs(array $ids) {
+    $this->ids = $ids;
+    return $this;
+  }
+
   public function withFilterPHIDs(array $phids) {
     $this->filterPHIDs = $phids;
     return $this;
@@ -106,6 +112,13 @@ final class PhabricatorFeedQuery
         $this->rangeMax);
     }
 
+    if ($this->ids !== null) {
+      $where[] = qsprintf(
+        $conn,
+        'story.id IN (%Ld)',
+        $this->ids);
+    }
+
     return $where;
   }
 
@@ -147,17 +160,17 @@ final class PhabricatorFeedQuery
     );
   }
 
-  protected function applyExternalCursorConstraintsToQuery(
+  public function applyExternalCursorConstraintsToQuery(
     PhabricatorCursorPagedPolicyAwareQuery $subquery,
     $cursor) {
     $subquery->withChronologicalKeys(array($cursor));
   }
 
-  protected function newExternalCursorStringForResult($object) {
+  public function newExternalCursorStringForResult($object) {
     return $object->getChronologicalKey();
   }
 
-  protected function newPagingMapFromPartialObject($object) {
+  public function newPagingMapFromPartialObject($object) {
     // This query is unusual, and the "object" is a raw result row.
     return array(
       'key' => $object['chronologicalKey'],
