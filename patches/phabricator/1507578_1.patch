diff --git a/src/applications/audit/editor/PhabricatorAuditEditor.php b/src/applications/audit/editor/PhabricatorAuditEditor.php
index d4fa1c32f..cb7af7e90 100644
--- a/src/applications/audit/editor/PhabricatorAuditEditor.php
+++ b/src/applications/audit/editor/PhabricatorAuditEditor.php
@@ -421,6 +421,10 @@ final class PhabricatorAuditEditor
         ->setMetadataValue('edge:type', $reverts_edge)
         ->setNewValue(array('+' => $reverted_phids));
 
+      $this->reopenRevertedRevisions(
+        $reverted_revisions,
+        $reverted_commits);
+
       $phid_map[] = $reverted_phids;
     }
 
@@ -855,4 +859,59 @@ final class PhabricatorAuditEditor
     $commit->attachAudits($with_auditors->getAudits());
   }
 
+  private function reopenRevertedRevisions(
+    array $revisions,
+    array $commits) {
+
+    $revision_phids = mpull($revisions, 'getPHID');
+
+    // When a commit "reverts <hash>", we want to reopen any revisions
+    // associated with that commit hash. Find all the revisions associated
+    // with reverted commits.
+    if ($commits) {
+      $edge_query = id(new PhabricatorEdgeQuery())
+        ->withSourcePHIDs(mpull($commits, 'getPHID'))
+        ->withEdgeTypes(
+          array(
+            DiffusionCommitHasRevisionEdgeType::EDGECONST
+          ));
+      $edge_query->execute();
+
+      $more_revision_phids = $edge_query->getDestinationPHIDs();
+      foreach ($more_revision_phids as $revision_phid) {
+        $revision_phids[] = $revision_phid;
+      }
+    }
+
+    if (!$revision_phids) {
+      return;
+    }
+
+    $viewer = $this->getActor();
+
+    // Now, find associated revisions in the "Published" status and reopen
+    // them.
+    $revisions = id(new DifferentialRevisionQuery())
+      ->setViewer($viewer)
+      ->withPHIDs($revision_phids)
+      ->withStatuses(
+        array(
+          DifferentialRevisionStatus::PUBLISHED,
+        ))
+      ->execute();
+
+    foreach ($revisions as $revision) {
+      $editor_template = $revision->getApplicationTransactionEditor();
+
+      $xactions = array();
+      $xactions[] = $revision->getApplicationTransactionTemplate()
+        ->setTransactionType(
+          DifferentialRevisionReopenTransaction::TRANSACTIONTYPE)
+        ->setNewValue(true);
+
+      $editor = $this->newSubEditor($editor_template)
+        ->applyTransactions($revision, $xactions);
+    }
+  }
+
 }
